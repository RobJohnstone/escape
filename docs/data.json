{
    "project": {
        "name": "escape",
        "description": "HTML5 Game - 1942: You are a British paratrooper captured in France during a raid on a secret German radar installation. Taken to a Gestapo interrogation centre you must now escape and return to Britain.",
        "version": "0.1.4-13",
        "url": ""
    },
    "files": {
        "js/lib/AStar.js": {
            "name": "js/lib/AStar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/lib/jquery-2.0.3.js": {
            "name": "js/lib/jquery-2.0.3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/actorPrototype.js": {
            "name": "js/actorPrototype.js",
            "modules": {
                "actorPrototype": 1
            },
            "classes": {
                "actorPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/actors.js": {
            "name": "js/actors.js",
            "modules": {
                "actors": 1
            },
            "classes": {
                "actors": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/baddyPrototype.js": {
            "name": "js/baddyPrototype.js",
            "modules": {
                "baddyPrototype": 1
            },
            "classes": {
                "baddyPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/campaign.js": {
            "name": "js/campaign.js",
            "modules": {
                "campaign": 1
            },
            "classes": {
                "campaign": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/edit.js": {
            "name": "js/edit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/entities.js": {
            "name": "js/entities.js",
            "modules": {
                "entities": 1
            },
            "classes": {
                "entities": 1,
                "entityPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/escape.js": {
            "name": "js/escape.js",
            "modules": {
                "game": 1
            },
            "classes": {
                "game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/graphics.js": {
            "name": "js/graphics.js",
            "modules": {
                "graphics": 1
            },
            "classes": {
                "graphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/input.js": {
            "name": "js/input.js",
            "modules": {
                "input": 1
            },
            "classes": {
                "input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/map.js": {
            "name": "js/map.js",
            "modules": {
                "map": 1
            },
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/objectPrototype.js": {
            "name": "js/objectPrototype.js",
            "modules": {
                "objectPrototype": 1
            },
            "classes": {
                "objectPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/palette.js": {
            "name": "js/palette.js",
            "modules": {
                "palette": 1
            },
            "classes": {
                "palette": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/playerPrototype.js": {
            "name": "js/playerPrototype.js",
            "modules": {
                "playerPrototype": 1
            },
            "classes": {
                "playerPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/polyfills.js": {
            "name": "js/polyfills.js",
            "modules": {
                "polyfills": 1
            },
            "classes": {
                "polyfills": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/projectilePrototype.js": {
            "name": "js/projectilePrototype.js",
            "modules": {
                "projectilePrototype": 1
            },
            "classes": {
                "projectilePrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/screen.js": {
            "name": "js/screen.js",
            "modules": {
                "screen": 1
            },
            "classes": {
                "screen": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/tiles.js": {
            "name": "js/tiles.js",
            "modules": {
                "tiles": 1
            },
            "classes": {
                "tiles": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/timer.js": {
            "name": "js/timer.js",
            "modules": {
                "timer": 1
            },
            "classes": {
                "timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/util.js": {
            "name": "js/util.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/vector.js": {
            "name": "js/vector.js",
            "modules": {
                "vector": 1
            },
            "classes": {
                "vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/weapons.js": {
            "name": "js/weapons.js",
            "modules": {
                "weapons": 1
            },
            "classes": {
                "weapons": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "actorPrototype": {
            "name": "actorPrototype",
            "submodules": {},
            "classes": {
                "actorPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/actorPrototype.js",
            "line": 1,
            "description": "Prototype for all actors. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "entityPrototype"
        },
        "actors": {
            "name": "actors",
            "submodules": {},
            "classes": {
                "actors": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/actors.js",
            "line": 1,
            "description": "Definitions for all the actor types in the game. Also includes a factory method (create)\nto create an actor of that type"
        },
        "baddyPrototype": {
            "name": "baddyPrototype",
            "submodules": {},
            "classes": {
                "baddyPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/baddyPrototype.js",
            "line": 1,
            "description": "Prototype for all baddies. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "actorPrototype"
        },
        "campaign": {
            "name": "campaign",
            "submodules": {},
            "classes": {
                "campaign": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/campaign.js",
            "line": 1,
            "description": "Handles all state and behaviour for campaigns"
        },
        "game": {
            "name": "game",
            "submodules": {},
            "classes": {
                "game": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/escape.js",
            "line": 11,
            "description": "ESCAPE\n\nThe game entry point code and loop"
        },
        "entities": {
            "name": "entities",
            "submodules": {},
            "classes": {
                "entities": 1,
                "entityPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/entities.js",
            "line": 49,
            "description": "entities object contains code for tracking, processing and rendering entities"
        },
        "graphics": {
            "name": "graphics",
            "submodules": {},
            "classes": {
                "graphics": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/graphics.js",
            "line": 1,
            "description": "Graphics module\nContains all code that outputs to the canvas"
        },
        "input": {
            "name": "input",
            "submodules": {},
            "classes": {
                "input": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/input.js",
            "line": 1,
            "description": "Input module\nContains all code relating to input"
        },
        "map": {
            "name": "map",
            "submodules": {},
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/map.js",
            "line": 1,
            "description": "Map module. Objects and methods concerning the map"
        },
        "objectPrototype": {
            "name": "objectPrototype",
            "submodules": {},
            "classes": {
                "objectPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/objectPrototype.js",
            "line": 1,
            "description": "Extend Object.prototype with helper methods to simplify inheritance\n\nEscape uses prototypal style inheritance rather than the constructor / pseudo-classical \napproach used by many javascript developers. The \"blueprints\" for each type of object\nare defined as objects in files named \"<type>Prototype.js\". A new object of that type can \nbe created using \"var newObj = <type>Prototype.create();\". To create a new prototype based\nupon a previous one use \"var newPrototype = <type>Prototype.extend();\"\n\nIt could be argued that extending Object.prototype in this way is an anti-pattern due to the\neffect it could have on code written by those who are unaware that it has been extended. However,\nthe code below takes account of the most common types of conflict and employs suitable preventative\nmeasures so this sort of problem should not occur."
        },
        "palette": {
            "name": "palette",
            "submodules": {},
            "classes": {
                "palette": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/palette.js",
            "line": 1,
            "description": "Command palette for the game editor"
        },
        "playerPrototype": {
            "name": "playerPrototype",
            "submodules": {},
            "classes": {
                "playerPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/playerPrototype.js",
            "line": 1,
            "description": "Prototype for the player. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "actorPrototype"
        },
        "polyfills": {
            "name": "polyfills",
            "submodules": {},
            "classes": {
                "polyfills": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/polyfills.js",
            "line": 1,
            "description": "Polyfills module"
        },
        "projectilePrototype": {
            "name": "projectilePrototype",
            "submodules": {},
            "classes": {
                "projectilePrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/projectilePrototype.js",
            "line": 1,
            "description": "Prototype for all projectiles. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "entityPrototype"
        },
        "screen": {
            "name": "screen",
            "submodules": {},
            "classes": {
                "screen": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/screen.js",
            "line": 1,
            "description": "Screen methods"
        },
        "tiles": {
            "name": "tiles",
            "submodules": {},
            "classes": {
                "tiles": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/tiles.js",
            "line": 1,
            "description": "Tiles module.\n\nHandles all functionality associated with map tiles\nIf you're looking for something and can't find it then try the map module"
        },
        "timer": {
            "name": "timer",
            "submodules": {},
            "classes": {
                "timer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/timer.js",
            "line": 1,
            "description": "Keeps track of the time between frames\n\nTODO: expand with functionality to set custom timers"
        },
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/util.js",
            "line": 1,
            "description": "Utility methods that do not really belong any where else"
        },
        "vector": {
            "name": "vector",
            "submodules": {},
            "classes": {
                "vector": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/vector.js",
            "line": 1,
            "description": "A library of useful vector math functions\n\nAt first glance it may appear that a nicer syntax could be obtained by creating a vector type\nand attaching these methods to the prototype. However, the most common use case is an object\nof a different type that happens to have x and y properties. As using apply/call is fiddly\nin terms of syntax and multiple inheritance is memory inefficient in javascript (an object can \nonly be linked to a single prototype), I believe this approach to be best."
        },
        "weapons": {
            "name": "weapons",
            "submodules": {},
            "classes": {
                "weapons": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/weapons.js",
            "line": 1,
            "description": "Weapon definitions"
        }
    },
    "classes": {
        "actorPrototype": {
            "name": "actorPrototype",
            "shortname": "actorPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "actorPrototype",
            "namespace": "",
            "file": "js/actorPrototype.js",
            "line": 1,
            "description": "Prototype for all actors. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "actors": {
            "name": "actors",
            "shortname": "actors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "actors",
            "namespace": "",
            "file": "js/actors.js",
            "line": 1,
            "description": "Definitions for all the actor types in the game. Also includes a factory method (create)\nto create an actor of that type"
        },
        "baddyPrototype": {
            "name": "baddyPrototype",
            "shortname": "baddyPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "baddyPrototype",
            "namespace": "",
            "file": "js/baddyPrototype.js",
            "line": 1,
            "description": "Prototype for all baddies. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "campaign": {
            "name": "campaign",
            "shortname": "campaign",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "campaign",
            "namespace": "",
            "file": "js/campaign.js",
            "line": 1,
            "description": "Handles all state and behaviour for campaigns"
        },
        "game": {
            "name": "game",
            "shortname": "game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "game",
            "namespace": "",
            "file": "js/escape.js",
            "line": 11
        },
        "entities": {
            "name": "entities",
            "shortname": "entities",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entities",
            "namespace": "",
            "file": "js/entities.js",
            "line": 1,
            "description": "entities object contains code for tracking, processing and rendering entities"
        },
        "entityPrototype": {
            "name": "entityPrototype",
            "shortname": "entityPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entities",
            "namespace": "",
            "file": "js/entities.js",
            "line": 49,
            "description": "Prototype for all entities\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "graphics": {
            "name": "graphics",
            "shortname": "graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "file": "js/graphics.js",
            "line": 1,
            "description": "Graphics module\nContains all code that outputs to the canvas"
        },
        "input": {
            "name": "input",
            "shortname": "input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "input",
            "namespace": "",
            "file": "js/input.js",
            "line": 1,
            "description": "Input module\nContains all code relating to input"
        },
        "map": {
            "name": "map",
            "shortname": "map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "js/map.js",
            "line": 1,
            "description": "Map module. Objects and methods concerning the map"
        },
        "objectPrototype": {
            "name": "objectPrototype",
            "shortname": "objectPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "objectPrototype",
            "namespace": "",
            "file": "js/objectPrototype.js",
            "line": 1,
            "description": "Extend Object.prototype with helper methods to simplify inheritance\n\nEscape uses prototypal style inheritance rather than the constructor / pseudo-classical \napproach used by many javascript developers. The \"blueprints\" for each type of object\nare defined as objects in files named \"<type>Prototype.js\". A new object of that type can \nbe created using \"var newObj = <type>Prototype.create();\". To create a new prototype based\nupon a previous one use \"var newPrototype = <type>Prototype.extend();\"\n\nIt could be argued that extending Object.prototype in this way is an anti-pattern due to the\neffect it could have on code written by those who are unaware that it has been extended. However,\nthe code below takes account of the most common types of conflict and employs suitable preventative\nmeasures so this sort of problem should not occur."
        },
        "palette": {
            "name": "palette",
            "shortname": "palette",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "palette",
            "namespace": "",
            "file": "js/palette.js",
            "line": 1,
            "description": "Command palette for the game editor"
        },
        "playerPrototype": {
            "name": "playerPrototype",
            "shortname": "playerPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "playerPrototype",
            "namespace": "",
            "file": "js/playerPrototype.js",
            "line": 1,
            "description": "Prototype for the player. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "polyfills": {
            "name": "polyfills",
            "shortname": "polyfills",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "polyfills",
            "namespace": "",
            "file": "js/polyfills.js",
            "line": 1,
            "description": "Polyfills module"
        },
        "projectilePrototype": {
            "name": "projectilePrototype",
            "shortname": "projectilePrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "projectilePrototype",
            "namespace": "",
            "file": "js/projectilePrototype.js",
            "line": 1,
            "description": "Prototype for all projectiles. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "screen": {
            "name": "screen",
            "shortname": "screen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "screen",
            "namespace": "",
            "file": "js/screen.js",
            "line": 1,
            "description": "Screen methods"
        },
        "tiles": {
            "name": "tiles",
            "shortname": "tiles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tiles",
            "namespace": "",
            "file": "js/tiles.js",
            "line": 1,
            "description": "Tiles module.\n\nHandles all functionality associated with map tiles\nIf you're looking for something and can't find it then try the map module"
        },
        "timer": {
            "name": "timer",
            "shortname": "timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "timer",
            "namespace": "",
            "file": "js/timer.js",
            "line": 1,
            "description": "Keeps track of the time between frames\n\nTODO: expand with functionality to set custom timers"
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "js/util.js",
            "line": 1,
            "description": "Utility methods that do not really belong any where else"
        },
        "vector": {
            "name": "vector",
            "shortname": "vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vector",
            "namespace": "",
            "file": "js/vector.js",
            "line": 1,
            "description": "A library of useful vector math functions\n\nAt first glance it may appear that a nicer syntax could be obtained by creating a vector type\nand attaching these methods to the prototype. However, the most common use case is an object\nof a different type that happens to have x and y properties. As using apply/call is fiddly\nin terms of syntax and multiple inheritance is memory inefficient in javascript (an object can \nonly be linked to a single prototype), I believe this approach to be best."
        },
        "weapons": {
            "name": "weapons",
            "shortname": "weapons",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "weapons",
            "namespace": "",
            "file": "js/weapons.js",
            "line": 1,
            "description": "Weapon definitions"
        }
    },
    "classitems": [
        {
            "file": "js/lib/AStar.js",
            "line": 3,
            "description": "A* (A-Star) algorithm for a path finder",
            "author": "Andrea Giammarchi",
            "license": "Mit Style License",
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1157,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1177,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1186,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1207,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1221,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1250,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1261,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1272,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1294,
            "description": "Detect xml",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1308,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1718,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1747,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 21,
            "description": "Moves the actor in the direction indicated by vector v. If this would result in a collision with the map\nthen a more sensible vector is chosen and the actor moves that way instead",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "v",
                    "description": "the movement vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "true if the actor was unable to move. This is useful for the AI",
                "type": "Boolean"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 50,
            "description": "Moves actor towards the position indicated, taking into account the actor's speed\nMovement is attempted \"as the crow flies\" with no route selection",
            "itemtype": "method",
            "name": "moveTowards",
            "params": [
                {
                    "name": "position",
                    "description": "the location to move towards",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 65,
            "description": "Moves actor towards the position indicated, while performing sensible route selection\nRoute selection algorithm is A*",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "position",
                    "description": "the location to move to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 87,
            "description": "handles being hit by a projectile, including effect on health and action to take upon death",
            "itemtype": "method",
            "name": "hit",
            "params": [
                {
                    "name": "projectile",
                    "description": "The object that is doing the hitting. Should inherit from projectilePrototype",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this;"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 107,
            "description": "Fires the actor's weapon",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "target",
                    "description": "The location that is to be aimed at",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 161,
            "description": "Outputs an abbreviated version of the entity, suitable for saving to file",
            "itemtype": "method",
            "name": "abbr",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actors.js",
            "line": 13,
            "description": "Creates an actor of the specified type",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "actor",
                    "description": "The object to extend with the actor definition. The type property \nof actor determines which definition to use.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An actor object",
                "type": "Object"
            },
            "class": "actors",
            "module": "actors"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 17,
            "description": "Defines the action to be taken by baddies each frame",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 39,
            "description": "Takes the current orders and calls the appropriate function in the appropriate context",
            "itemtype": "method",
            "name": "processOrders",
            "params": [
                {
                    "name": "orders",
                    "description": "string indicating the current orders"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 53,
            "description": "The baddy's default state. Currently does nothing",
            "itemtype": "method",
            "name": "orders.watch",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 63,
            "description": "Baddy attacks its target. If the baddy can no longer see the target it gives chase",
            "itemtype": "method",
            "name": "orders.attack",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 77,
            "description": "Baddy chases after target based upon its last known location\nIf the baddy gets to this location and still cannot see the player\nit goes into search mode",
            "itemtype": "method",
            "name": "orders.chase",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 99,
            "description": "The baddy searches for the target by heading off in the direction the target\nwas last seen moving",
            "itemtype": "method",
            "name": "orders.search",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 114,
            "description": "The baddy returns to its start location. It then enters watch mode",
            "itemtype": "method",
            "name": "orders.returnToStation",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 134,
            "description": "The baddy goes to its current waypoint, then reverts to its original orders",
            "itemtype": "method",
            "name": "orders.goto",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 154,
            "description": "The baddy patrols between a series of waypoints. When the baddy gets to the end, he returns directly to the first way point and starts again",
            "itemtype": "method",
            "name": "orders.patrol",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 175,
            "description": "The baddy's reaction to being hit",
            "itemtype": "method",
            "name": "hitHandler",
            "params": [
                {
                    "name": "projectile",
                    "description": "the object the baddy has been hit by"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 187,
            "description": "Checks if the baddy can see the player",
            "itemtype": "method",
            "name": "baddySeePlayer",
            "return": {
                "description": "boolean"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 199,
            "description": "sets the baddy's target and other target related information",
            "itemtype": "method",
            "name": "setTarget",
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 212,
            "description": "Renders the current patrol route",
            "itemtype": "method",
            "name": "renderPatrolRoute",
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/campaign.js",
            "line": 22,
            "description": "Loads a campaign",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "campaignName",
                    "description": "The name of the campaign. If campaignName is an object it treats that\nas the campaignObj rather than loading via ajax",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute once the campaign has been loaded successfully",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 60,
            "description": "Gets the name of the current map",
            "itemtype": "method",
            "name": "getCurrentmap",
            "return": {
                "description": "The name of the current map",
                "type": "String"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 70,
            "description": "Populates the relevant DOM elements with campaign information",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this;"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 86,
            "description": "Creates a new campaign. The only field populated is the name.\nThis method does not save the newly created campaign (use campaign.save())",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the new campaign",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 104,
            "description": "Saves the current information about the campaign\nNote: this requires that the server is in 'dev' mode",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to execute once the campaign has been saved",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 127,
            "description": "updates the value of a field in the campaign\ncan remove the prefix campaign from property names while preserving camel-casing",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "field",
                    "description": "The field to update (either the property name or a the id of a form element associated with that property)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 145,
            "description": "Adds a map to the campaign\nNote this does not check whether the map actually exists",
            "itemtype": "method",
            "name": "addMap",
            "params": [
                {
                    "name": "mapName",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "The index which this map should occupy within the \narray (defaults to adding the map to the end)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 167,
            "description": "Moves the map up one in the order (nearer the start)",
            "params": [
                {
                    "name": "mapName",
                    "description": "The name of the map",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this;"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 183,
            "description": "Moves the map down one in the order (nearer the end)",
            "params": [
                {
                    "name": "mapName",
                    "description": "The name of the map",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this;"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 199,
            "description": "Populates the relevant DOM ul with the campaigns",
            "itemtype": "method",
            "name": "list",
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/edit.js",
            "line": 15,
            "description": "Event handlers for map selection screen",
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 147,
            "description": "sends a request to the server instructing it to delete a file",
            "itemtype": "method",
            "name": "_deleteItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The delete button. Assuumes that the parent element has sufficent info in its class and id to identify the element to be deleted",
                    "type": "DOM element"
                },
                {
                    "name": "callback",
                    "description": "The function to be executed after the request has been completed",
                    "type": "Function"
                }
            ],
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 194,
            "description": "Updates the value of an item",
            "itemtype": "method",
            "name": "_editItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The DOM element being updated",
                    "type": "DOM Element"
                }
            ],
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 211,
            "description": "Carries out all initialisation actions",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapName",
                    "description": "or a mapObj",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 226,
            "description": "Starts any modules that need starting and then begins the game loop",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 242,
            "description": "The body of the game loop",
            "itemtype": "method",
            "name": "main",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 263,
            "description": "Resets game state when map data changes",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 276,
            "description": "A singleton DOM element. On first call creates the DOM element. On all calls populates the DOM element with the items\nin the game.info.items array.",
            "itemtype": "method",
            "name": "info",
            "return": {
                "description": "game",
                "type": "Object"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 298,
            "description": "Adds an item to the game.info.items array. \nIf one argument, adds the variable name and value\nIf two, adds both separated by a colon",
            "itemtype": "method",
            "name": "info.add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the value to be displayed (basically a label)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to be displayed. If not a string, it will be coerced into one",
                    "type": "String"
                }
            ],
            "return": {
                "description": "game",
                "type": "Object"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/entities.js",
            "line": 15,
            "description": "Calls the process() method for each tracked entity and clears up entities that have been marked for removal",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "entities",
            "module": "entities"
        },
        {
            "file": "js/entities.js",
            "line": 33,
            "description": "Calls the render method for each tracked entity",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "entities",
            "module": "entities"
        },
        {
            "file": "js/entities.js",
            "line": 62,
            "description": "initialise entity",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "this"
            },
            "class": "entityPrototype",
            "module": "entities"
        },
        {
            "file": "js/entities.js",
            "line": 82,
            "description": "Placeholder function to be overridden by child objects\nInvoked once per game loop",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "entityPrototype",
            "module": "entities"
        },
        {
            "file": "js/escape.js",
            "line": 21,
            "description": "Initialise all required modules",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapName",
                    "description": "the filename of the map minus the file extension",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "Whether or not to start the game once the map has loaded (defaults to true)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 36,
            "description": "Start the game",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 49,
            "description": "Resume the game (either from scratch of from paused)\nStarts all required modules and starts the game loop",
            "itemtype": "method",
            "name": "resume",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 63,
            "description": "The body of the game loop",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 95,
            "description": "Displays debugging info and stats on the screen",
            "itemtype": "method",
            "name": "info",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 114,
            "description": "Pauses the game",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 129,
            "description": "Action to take when the game is over",
            "itemtype": "method",
            "name": "over",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 141,
            "description": "Action to take when map complete",
            "itemtype": "method",
            "name": "mapComplete",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 159,
            "description": "Resets game state in order to allow a new game to start",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "start",
                    "description": "Whether or not to start the game once the map has loaded (defaults to true)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 173,
            "description": "End the game",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/graphics.js",
            "line": 13,
            "description": "Initialise graphics settings and call specific graphics initialisation methods",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "width",
                    "description": "the width of the canvas in pixels. If set to \"fullscreen\" the \n width and height are set to the viewport width and height",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the canvas in pixels",
                    "type": "Number"
                },
                {
                    "name": "clipping",
                    "description": "if true, only the visible portion of the map is rendered",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 39,
            "description": "Create and initialise the canvas",
            "itemtype": "method",
            "name": "initCanvas",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the canvas (in case support for multiple canvases is needed later)",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "the width of the canvas in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the canvas in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 62,
            "description": "Adds text to graphics.textQueue to be rendered later this frame",
            "itemtype": "method",
            "name": "writeText",
            "params": [
                {
                    "name": "string",
                    "description": "the text to be written",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "the x coord of the string's position on the canvas",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y coord of the string's position on the canvas",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 76,
            "description": "renders the passed string immediately without taking measures to ensure that other\nrendered items this frame do not obscure the text",
            "itemtype": "method",
            "name": "writeTextNow",
            "params": [
                {
                    "name": "string",
                    "description": "the text to be rendered",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "the x coord of the string's position on the canvas",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y coord of the string's position on the canvas",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 101,
            "description": "Renders all text in the queue",
            "itemtype": "method",
            "name": "renderText",
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 115,
            "description": "object storing all vectors that need to be rendered this frame",
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 120,
            "description": "Renders each vector",
            "itemtype": "method",
            "name": "vectors.render",
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 134,
            "description": "Adds a vector command to be rendered this frame",
            "itemtype": "method",
            "name": "vectors.command",
            "params": [
                {
                    "name": "command",
                    "description": "contains code for rendering a specific vector using native HTML5 canvas methods",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 146,
            "description": "Draws a line this frame",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "start",
                    "description": "The start point",
                    "type": "Vector"
                },
                {
                    "name": "end",
                    "description": "The end point",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the line (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 163,
            "description": "Draws a line now",
            "itemtype": "method",
            "name": "lineNow",
            "params": [
                {
                    "name": "start",
                    "description": "The start point",
                    "type": "Vector"
                },
                {
                    "name": "end",
                    "description": "The end point",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the line (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 191,
            "description": "Draws a rectangle (outline only) this frame",
            "itemtype": "method",
            "name": ".rect",
            "params": [
                {
                    "name": "topLeft",
                    "description": "The coordinates of the top left corner of the rect",
                    "type": "Vector"
                },
                {
                    "name": "dimensions",
                    "description": "The width and height of the rect (defailts to 50 for both);",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the rect (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 208,
            "description": "Draws a rectangle (outline only) now",
            "itemtype": "method",
            "name": "rectNow",
            "params": [
                {
                    "name": "topLeft",
                    "description": "The coordinates of the top left corner of the rect",
                    "type": "Vector"
                },
                {
                    "name": "dimensions",
                    "description": "The width and height of the rect (defailts to 50 for both);",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the rect (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 235,
            "description": "Draws a circle (filled) this frame",
            "itemtype": "method",
            "name": "circle",
            "params": [
                {
                    "name": "centre",
                    "description": "The centre of the circle",
                    "type": "Vector"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle (defaults to 50)",
                    "type": "Number"
                },
                {
                    "name": "colour",
                    "description": "The colour of the circle (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 252,
            "description": "Draws a circle (filled) now",
            "itemtype": "method",
            "name": "circleNow",
            "params": [
                {
                    "name": "centre",
                    "description": "The centre of the circle",
                    "type": "Vector"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle (defaults to 50)",
                    "type": "Number"
                },
                {
                    "name": "colour",
                    "description": "The colour of the circle (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 277,
            "description": "Renders the canvas and all graphics",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 299,
            "description": "Changes the size of a canvas",
            "itemtype": "method",
            "name": "resizeCanvas",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the canvas to be resized",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "the width of the canvas in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the canvas in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/input.js",
            "line": 23,
            "description": "starts observing input",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "mode",
                    "description": "the input mode (i.e. what to check and what methods to run as a result)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 115,
            "description": "invoke event handlers",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 146,
            "description": "detach all input event handlers",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 157,
            "description": "Sets the style of the cursor to be used for this frame",
            "itemtype": "method",
            "name": "setMouseCursor",
            "params": [
                {
                    "name": "cursorStyle",
                    "description": "The css cursor style",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 168,
            "description": "Performs any rendering required by input",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/map.js",
            "line": 30,
            "description": "initialise the map based on a loaded map object",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapObj",
                    "description": "information about the map loaded from file (optional)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 65,
            "description": "load the map data",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "mapName",
                    "description": "the name of the map. This should also be the filename minus the extension \nif mapName is an object it will be treated as the mapObj and loaded instead of requesting the object\nfrom the server",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "the function to be called once the map has loaded",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 94,
            "description": "takes the map object and inserts it into the engine",
            "itemtype": "method",
            "name": "_loadMapObj",
            "params": [
                {
                    "name": "mapObj",
                    "description": "The map object to load",
                    "type": "Object"
                }
            ],
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 108,
            "description": "Creates a new blank map object",
            "itemtype": "method",
            "name": "new",
            "params": [
                {
                    "name": "mapName",
                    "description": "The filename of the new map minus the json extension",
                    "type": "String"
                },
                {
                    "name": "cols",
                    "description": "The number of columns in the map (defaults to 50)",
                    "type": "Number"
                },
                {
                    "name": "rows",
                    "description": "The number of rows in the map (defaults to 50)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "mapObj",
                "type": "Object"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 134,
            "description": "Updates map values",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "field",
                    "description": "The field to update (either the property name or a the id of a form element associated with that property)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 151,
            "description": "Saves the map on the server (this should only be allowed on the dev server)",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 181,
            "description": "renders the map",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 204,
            "description": "Checks that a position is within the bounds of the map",
            "itemtype": "method",
            "name": "checkWithinBounds",
            "params": [
                {
                    "name": "pos",
                    "description": "the position to test",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "true if the position is within the bounds of the map, false otherwise",
                "type": "Boolean"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 218,
            "description": "Gets the tile object for the tile index",
            "itemtype": "method",
            "name": "getTileObj",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 232,
            "description": "Checks that a particular tile is passable",
            "itemtype": "method",
            "name": "isPassable",
            "params": [
                {
                    "name": "tileIndex",
                    "description": "the index of the tile within the E.tiles.tiles array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the tile is passable, false otherwise",
                "type": "Boolean"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 243,
            "itemtype": "method",
            "name": "collisionAdjust",
            "params": [
                {
                    "name": "entity",
                    "description": "the entity that is moving",
                    "type": "Entity"
                },
                {
                    "name": "v",
                    "description": "the desired movement vector of the entity",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "an allowable movement vector",
                "type": "Vector"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 308,
            "description": "Scrolls the map so that it is looking at the passed position",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "position",
                    "description": "The position to look at",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 328,
            "description": "Returns the index of the tile corresponding to the passed postion",
            "itemtype": "method",
            "name": "getTileIndex",
            "params": [
                {
                    "name": "position",
                    "description": "the position to test",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "the index of the appropriate tile or undefined if there is no tile at that position",
                "type": "Number"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 344,
            "description": "Returns a vector indicating the position of the centre of the tile",
            "itemtype": "method",
            "name": "getTileCentre",
            "params": [
                {
                    "name": "tile",
                    "description": "The tile to consider. If an object is passed it will try to determine the tile based on the x and y properties of the object",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The postion of the centre of the tile",
                "type": "Vector"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 363,
            "description": "Converts a tile index into 2d coordinates within the tiles array",
            "itemtype": "method",
            "name": "getTileCoords",
            "params": [
                {
                    "name": "tile",
                    "description": "The tile index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The first element is the x coordinate, the second the y coordinate",
                "type": "Array"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 377,
            "description": "Converts 2d tile coords (not pixel coords) into a tile index",
            "itemtype": "method",
            "name": "getTileFromCoords",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord of the tile",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coord of the tile",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The tile index",
                "type": "Number"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 393,
            "description": "Checks if a line between two points can pass unimpeeded by the map\nNote that this does not check for collisions with entities",
            "itemtype": "method",
            "name": "lineTraversable",
            "params": [
                {
                    "name": "start",
                    "description": "The start location",
                    "type": "Vector"
                },
                {
                    "name": "end",
                    "description": "The end location",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "True if there are no impassable tiles between the start and end points, false otherwise",
                "type": "Boolean"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 422,
            "description": "Higlights the tile indicated",
            "itemtype": "method",
            "name": "highlightTile",
            "params": [
                {
                    "name": "tileIndex",
                    "description": "The tileIndex of the tile to highlight",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 444,
            "description": "highlights the tile under the mouse cursor",
            "itemtype": "method",
            "name": "highlightMouseTile",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 455,
            "description": "Resizes the map",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "delta",
                    "description": "The four properties (top, right, bottom, left) indicate how many columns/rows to add. Negative numbers shrink the map",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 539,
            "description": "Returns a string indicating the side of the map closest to the mouse cursor",
            "itemtype": "method",
            "name": "sideClosestToCursor",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/objectPrototype.js",
            "line": 21,
            "description": "Return a new object inheriting from the previous one",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "propertiesObject",
                    "description": "an object that contains properties to add to the new object (overwriting previous ones with the same name)\nThe reason to use this over Object.create is that to pass in properties to the new object, Object.create requires property descriptors as its\nsecond argument rather than a straightforward object"
                }
            ],
            "return": {
                "description": "The new object",
                "type": "Object"
            },
            "class": "objectPrototype",
            "module": "objectPrototype"
        },
        {
            "file": "js/objectPrototype.js",
            "line": 40,
            "description": "Create a new object based on this prototype, modify according to the passed in parameters and run the init method if available",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "propertiesObject",
                    "description": "an object that contains properties to add to the new object"
                },
                {
                    "name": "initObject",
                    "description": "Any other parameters are passed to the init function",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "The new object",
                "type": "Object"
            },
            "class": "objectPrototype",
            "module": "objectPrototype"
        },
        {
            "file": "js/objectPrototype.js",
            "line": 58,
            "description": "Creates a copy of an object rather than a reference to that object\nNote that it is not recursive and does not copy inherited properties",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A new object identical to the original",
                "type": "Object"
            },
            "class": "objectPrototype",
            "module": "objectPrototype"
        },
        {
            "file": "js/palette.js",
            "line": 40,
            "description": "Player tool",
            "itemtype": "method",
            "name": "tools.player.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 57,
            "description": "Remove actor tool",
            "itemtype": "method",
            "name": "tools.removeActor.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 77,
            "description": "Baddy tool",
            "itemtype": "method",
            "name": "tools.baddy.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 93,
            "description": "Selects a map tile or entity",
            "itemtype": "method",
            "name": "tools.select.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 128,
            "description": "Highlights the selected tile",
            "itemtype": "method",
            "name": "tools.select.render",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 153,
            "description": "rotates the selected object",
            "itemtype": "method",
            "name": "tools.rotate.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 174,
            "description": "Draws a line from the selected entity to the current mouse cursor position",
            "itemtype": "method",
            "name": "tools.rotate.render",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 189,
            "description": "Adds an extra row / column to the side of the map closest to the cursor",
            "itemtype": "method",
            "name": "tools.expand.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 203,
            "description": "Sets the mouse cursor to an arrow indicating which side will be expanded",
            "itemtype": "method",
            "name": "tools.expand.render",
            "return": {
                "description": "palette;"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 222,
            "description": "Removes a row / column from the side of the map closest to the cursor",
            "itemtype": "method",
            "name": "tools.reduce.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 236,
            "description": "Sets the mouse cursor to an arrow indicating which side will be expanded",
            "itemtype": "method",
            "name": "tools.reduce.render",
            "return": {
                "description": "palette;"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 273,
            "description": "Initialises the patrol tool by clearing the currently selected entity's patrol route",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 288,
            "description": "Sets a patrol route for an actor",
            "itemtype": "method",
            "name": "tools.patrol.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 306,
            "description": "Displays the patrol route",
            "itemtype": "method",
            "name": "tools.patrol.render",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 328,
            "description": "Displays the command palette",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 339,
            "description": "Hides the command palette",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 350,
            "description": "Changes the current tool",
            "itemtype": "method",
            "name": "changeTool",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 375,
            "description": "Initialises the command palette\n\nIncludes a generic event handler for using the currently selected tool",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 405,
            "description": "Sets the properties that are to be displayed in the properties panel",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "properties",
                    "description": "The properties to be set. Note that all properties must be primatives (not objects)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 422,
            "description": "Carries out rendering actions on behalf of palette tools",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 438,
            "description": "refreshes the display of the palette",
            "itemtype": "method",
            "name": "refresh",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/playerPrototype.js",
            "line": 22,
            "description": "Actions to be taken each frame for the player",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "playerPrototype",
            "module": "playerPrototype"
        },
        {
            "file": "js/polyfills.js",
            "line": 8,
            "description": "[requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame)\n\nNote that in this implementation the frame rate will not be exactly 60 due to the browser being single threaded.\nTODO: There is a fix for this - google it",
            "itemtype": "method",
            "name": "requestAnimationFrame",
            "class": "polyfills",
            "module": "polyfills"
        },
        {
            "file": "js/projectilePrototype.js",
            "line": 17,
            "description": "Carries out the processing required by a projectile each frame",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "projectilePrototype",
            "module": "projectilePrototype"
        },
        {
            "file": "js/projectilePrototype.js",
            "line": 28,
            "description": "Moves the projectile testing for collisions and calling the appropriate hit handlers",
            "itemtype": "method",
            "name": "move",
            "return": {
                "description": "this"
            },
            "class": "projectilePrototype",
            "module": "projectilePrototype"
        },
        {
            "file": "js/projectilePrototype.js",
            "line": 56,
            "description": "Renders the projectile\n\nPlaceholder graphics TODO: replace with bitmaps",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "projectilePrototype",
            "module": "projectilePrototype"
        },
        {
            "file": "js/screen.js",
            "line": 20,
            "description": "Initialise screen",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "screenId",
                    "description": "The DOM ID of the initial screen to display",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 32,
            "description": "Change to another screen",
            "itemtype": "method",
            "name": "change",
            "params": [
                {
                    "name": "screenId",
                    "description": "The DOM ID of the screen to change to",
                    "type": "String"
                },
                {
                    "name": "updateHistory",
                    "description": "Whether or not to update the history (undefined defaults to true)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 59,
            "description": "Returns the DOM ID of the current screen",
            "itemtype": "method",
            "name": "getCurrent",
            "return": {
                "description": "The DOM ID of the current screen",
                "type": "String"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 69,
            "description": "Return to previous screen",
            "itemtype": "method",
            "name": "previous",
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 83,
            "description": "Actions to take when the current screen is updated",
            "itemtype": "method",
            "name": "update",
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 93,
            "description": "Actions to take when the screen is saved",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/tiles.js",
            "line": 16,
            "description": "Sets tile dimensions and passability",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "this"
            },
            "class": "tiles",
            "module": "tiles"
        },
        {
            "file": "js/tiles.js",
            "line": 41,
            "description": "Renders a tile\n\nPlaceholder code TODO: Update with bitmap graphics",
            "itemtype": "method",
            "name": "renderTile",
            "return": {
                "description": "this"
            },
            "class": "tiles",
            "module": "tiles"
        },
        {
            "file": "js/timer.js",
            "line": 15,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "this"
            },
            "class": "timer",
            "module": "timer"
        },
        {
            "file": "js/timer.js",
            "line": 30,
            "description": "updates the timer",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "timer",
            "module": "timer"
        },
        {
            "file": "js/util.js",
            "line": 12,
            "description": "Takes a string and returns the value of the global variable with that name\n\nTo avoid global cluttering this method understands '.' syntax to follow the namespace/object chain\nThe only usage envisaged so far is the loading of variable names from JSON. Any other usage probably means \nwe're doing something wrong. Even the json example may mean that but I've not yet thought of a better way!",
            "itemtype": "method",
            "name": "valFromString",
            "return": {
                "description": "value",
                "type": "Any"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "js/util.js",
            "line": 31,
            "description": "Moves an array element from one index to another",
            "params": [
                {
                    "name": "arr",
                    "description": "The array to modify",
                    "type": "Array"
                },
                {
                    "name": "currentIndex",
                    "description": "The index the element currently occupies",
                    "type": "Number"
                },
                {
                    "name": "newIndex",
                    "description": "The new index for the element to occupy",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "js/vector.js",
            "line": 19,
            "description": "returns a vector with integer values for both x and y coordinates\n\nThis is particularly useful when rendering to the canvas where there is a big performance hit for non-integer values",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to be rounded",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 35,
            "description": "Adds two vectors together, returning the resulting vector",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v1",
                    "description": "A vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "A vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The resulting vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 50,
            "description": "Returns a new vector that is a copy of the inital vector",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 60,
            "description": "Subtracts one vector from another",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "v1",
                    "description": "The vector to subtract",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The vector to subtract from",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The resulting vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 75,
            "description": "Returns a vector of the same magnitude pointing in the opposite direction",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "v",
                    "description": "The initial vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 86,
            "description": "Calculates the magnitude (length) of a vector",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The magnitude",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 97,
            "description": "Calculates the distance between two vectors (imagine they represent points)",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance between the two vectors",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 109,
            "description": "Returns a new vector pointing the same direction but with length 1",
            "itemtype": "method",
            "name": "normalise",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to normalise",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The normalised vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 124,
            "description": "Returns a new vector pointing in the same direction but of the specified length",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "v",
                    "description": "The intial vector",
                    "type": "Vector"
                },
                {
                    "name": "length",
                    "description": "The new length",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 140,
            "description": "Calculates the dot product between two vectors\n\nThis can be thought of as a number indicating how closely the two vectors are aligned",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The dot product",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 154,
            "description": "The angle between two vectors (in radians)",
            "itemtype": "method",
            "name": "angle",
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                },
                {
                    "name": "dirMatters",
                    "description": "If true then the angle is +ve for clockwise angles, -ve for anticlockwise. If false the angle is always positive",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The angle (in radians)",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 184,
            "description": "Converts an angle (in radians) to a normaLised vector",
            "itemtype": "method",
            "name": "angleToVector",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle (directional and in radians) to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The resulting normalised vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " js/lib/AStar.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/lib/jquery-2.0.3.js:1157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/lib/jquery-2.0.3.js:1221"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/lib/jquery-2.0.3.js:1308"
        },
        {
            "message": "Missing item type\nA* (A-Star) algorithm for a path finder",
            "line": " js/lib/AStar.js:3"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " js/lib/jquery-2.0.3.js:1157"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " js/lib/jquery-2.0.3.js:1177"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " js/lib/jquery-2.0.3.js:1186"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " js/lib/jquery-2.0.3.js:1207"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " js/lib/jquery-2.0.3.js:1221"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " js/lib/jquery-2.0.3.js:1250"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " js/lib/jquery-2.0.3.js:1261"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " js/lib/jquery-2.0.3.js:1272"
        },
        {
            "message": "Missing item type\nDetect xml",
            "line": " js/lib/jquery-2.0.3.js:1294"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " js/lib/jquery-2.0.3.js:1308"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " js/lib/jquery-2.0.3.js:1718"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " js/lib/jquery-2.0.3.js:1747"
        },
        {
            "message": "Missing item type\nMoves the map up one in the order (nearer the start)",
            "line": " js/campaign.js:167"
        },
        {
            "message": "Missing item type\nMoves the map down one in the order (nearer the end)",
            "line": " js/campaign.js:183"
        },
        {
            "message": "Missing item type\nEvent handlers for map selection screen",
            "line": " js/edit.js:15"
        },
        {
            "message": "Missing item type\nobject storing all vectors that need to be rendered this frame",
            "line": " js/graphics.js:115"
        },
        {
            "message": "Missing item type\nMoves an array element from one index to another",
            "line": " js/util.js:31"
        }
    ]
}