{
    "project": {
        "name": "escape",
        "description": "HTML5 Game - 1942: You are a British paratrooper captured in France during a raid on a secret German radar installation. Taken to a Gestapo interrogation centre you must now escape and return to Britain.",
        "version": "0.1.4-18",
        "url": ""
    },
    "files": {
        "js/lib/AStar.js": {
            "name": "js/lib/AStar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/lib/jquery-2.0.3.js": {
            "name": "js/lib/jquery-2.0.3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/lib/util.js": {
            "name": "js/lib/util.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/actorPrototype.js": {
            "name": "js/actorPrototype.js",
            "modules": {
                "actorPrototype": 1
            },
            "classes": {
                "actorPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/actors.js": {
            "name": "js/actors.js",
            "modules": {
                "actors": 1
            },
            "classes": {
                "actors": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/baddyPrototype.js": {
            "name": "js/baddyPrototype.js",
            "modules": {
                "baddyPrototype": 1
            },
            "classes": {
                "baddyPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/campaign.js": {
            "name": "js/campaign.js",
            "modules": {
                "campaign": 1
            },
            "classes": {
                "campaign": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/edit.js": {
            "name": "js/edit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/entities.js": {
            "name": "js/entities.js",
            "modules": {
                "entities": 1
            },
            "classes": {
                "entities": 1,
                "entityPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/escape.js": {
            "name": "js/escape.js",
            "modules": {
                "game": 1
            },
            "classes": {
                "game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/graphics.js": {
            "name": "js/graphics.js",
            "modules": {
                "graphics": 1
            },
            "classes": {
                "graphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/input.js": {
            "name": "js/input.js",
            "modules": {
                "input": 1
            },
            "classes": {
                "input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/map.js": {
            "name": "js/map.js",
            "modules": {
                "map": 1
            },
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/objectPrototype.js": {
            "name": "js/objectPrototype.js",
            "modules": {
                "objectPrototype": 1
            },
            "classes": {
                "objectPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/palette.js": {
            "name": "js/palette.js",
            "modules": {
                "palette": 1
            },
            "classes": {
                "palette": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/playerPrototype.js": {
            "name": "js/playerPrototype.js",
            "modules": {
                "playerPrototype": 1
            },
            "classes": {
                "playerPrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/polyfills.js": {
            "name": "js/polyfills.js",
            "modules": {
                "polyfills": 1
            },
            "classes": {
                "polyfills": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/projectilePrototype.js": {
            "name": "js/projectilePrototype.js",
            "modules": {
                "projectilePrototype": 1
            },
            "classes": {
                "projectilePrototype": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/screen.js": {
            "name": "js/screen.js",
            "modules": {
                "screen": 1
            },
            "classes": {
                "screen": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/tiles.js": {
            "name": "js/tiles.js",
            "modules": {
                "tiles": 1
            },
            "classes": {
                "tiles": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/timer.js": {
            "name": "js/timer.js",
            "modules": {
                "timer": 1
            },
            "classes": {
                "timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/vector.js": {
            "name": "js/vector.js",
            "modules": {
                "vector": 1
            },
            "classes": {
                "vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/weapons.js": {
            "name": "js/weapons.js",
            "modules": {
                "weapons": 1
            },
            "classes": {
                "weapons": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "specs/lib/jasmine-1.3.1/jasmine.js": {
            "name": "specs/lib/jasmine-1.3.1/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/lib/util.js",
            "line": 1,
            "description": "Utility methods that do not really belong any where else"
        },
        "actorPrototype": {
            "name": "actorPrototype",
            "submodules": {},
            "classes": {
                "actorPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/actorPrototype.js",
            "line": 3,
            "description": "Prototype for all actors. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "entityPrototype"
        },
        "actors": {
            "name": "actors",
            "submodules": {},
            "classes": {
                "actors": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/actors.js",
            "line": 3,
            "description": "Definitions for all the actor types in the game. Also includes a factory method (create)\nto create an actor of that type"
        },
        "baddyPrototype": {
            "name": "baddyPrototype",
            "submodules": {},
            "classes": {
                "baddyPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/baddyPrototype.js",
            "line": 3,
            "description": "Prototype for all baddies. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "actorPrototype"
        },
        "campaign": {
            "name": "campaign",
            "submodules": {},
            "classes": {
                "campaign": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/campaign.js",
            "line": 3,
            "description": "Handles all state and behaviour for campaigns"
        },
        "game": {
            "name": "game",
            "submodules": {},
            "classes": {
                "game": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/escape.js",
            "line": 11,
            "description": "ESCAPE\n\nThe game entry point code and loop"
        },
        "entities": {
            "name": "entities",
            "submodules": {},
            "classes": {
                "entities": 1,
                "entityPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/entities.js",
            "line": 51,
            "description": "entities object contains code for tracking, processing and rendering entities"
        },
        "graphics": {
            "name": "graphics",
            "submodules": {},
            "classes": {
                "graphics": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/graphics.js",
            "line": 3,
            "description": "Graphics module\nContains all code that outputs to the canvas"
        },
        "input": {
            "name": "input",
            "submodules": {},
            "classes": {
                "input": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/input.js",
            "line": 3,
            "description": "Input module\nContains all code relating to input"
        },
        "map": {
            "name": "map",
            "submodules": {},
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/map.js",
            "line": 3,
            "description": "Map module. Objects and methods concerning the map"
        },
        "objectPrototype": {
            "name": "objectPrototype",
            "submodules": {},
            "classes": {
                "objectPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/objectPrototype.js",
            "line": 1,
            "description": "Extend Object.prototype with helper methods to simplify inheritance\n\nEscape uses prototypal style inheritance rather than the constructor / pseudo-classical \napproach used by many javascript developers. The \"blueprints\" for each type of object\nare defined as objects in files named \"<type>Prototype.js\". A new object of that type can \nbe created using \"var newObj = <type>Prototype.create();\". To create a new prototype based\nupon a previous one use \"var newPrototype = <type>Prototype.extend();\"\n\nIt could be argued that extending Object.prototype in this way is an anti-pattern due to the\neffect it could have on code written by those who are unaware that it has been extended. However,\nthe code below takes account of the most common types of conflict and employs suitable preventative\nmeasures so this sort of problem should not occur."
        },
        "palette": {
            "name": "palette",
            "submodules": {},
            "classes": {
                "palette": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/palette.js",
            "line": 3,
            "description": "Command palette for the game editor"
        },
        "playerPrototype": {
            "name": "playerPrototype",
            "submodules": {},
            "classes": {
                "playerPrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/playerPrototype.js",
            "line": 3,
            "description": "Prototype for the player. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "actorPrototype"
        },
        "polyfills": {
            "name": "polyfills",
            "submodules": {},
            "classes": {
                "polyfills": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/polyfills.js",
            "line": 1,
            "description": "Polyfills module"
        },
        "projectilePrototype": {
            "name": "projectilePrototype",
            "submodules": {},
            "classes": {
                "projectilePrototype": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/projectilePrototype.js",
            "line": 3,
            "description": "Prototype for all projectiles. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js",
            "extends": "entityPrototype"
        },
        "screen": {
            "name": "screen",
            "submodules": {},
            "classes": {
                "screen": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/screen.js",
            "line": 3,
            "description": "Screen methods"
        },
        "tiles": {
            "name": "tiles",
            "submodules": {},
            "classes": {
                "tiles": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/tiles.js",
            "line": 3,
            "description": "Tiles module.\n\nHandles all functionality associated with map tiles\nIf you're looking for something and can't find it then try the map module"
        },
        "timer": {
            "name": "timer",
            "submodules": {},
            "classes": {
                "timer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/timer.js",
            "line": 3,
            "description": "Keeps track of the time between frames\n\nTODO: expand with functionality to set custom timers"
        },
        "vector": {
            "name": "vector",
            "submodules": {},
            "classes": {
                "vector": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/vector.js",
            "line": 3,
            "description": "A library of useful vector math functions\n\nAt first glance it may appear that a nicer syntax could be obtained by creating a vector type\nand attaching these methods to the prototype. However, the most common use case is an object\nof a different type that happens to have x and y properties. As using apply/call is fiddly\nin terms of syntax and multiple inheritance is memory inefficient in javascript (an object can \nonly be linked to a single prototype), I believe this approach to be best."
        },
        "weapons": {
            "name": "weapons",
            "submodules": {},
            "classes": {
                "weapons": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/weapons.js",
            "line": 3,
            "description": "Weapon definitions"
        }
    },
    "classes": {
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "js/lib/util.js",
            "line": 1,
            "description": "Utility methods that do not really belong any where else"
        },
        "actorPrototype": {
            "name": "actorPrototype",
            "shortname": "actorPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "actorPrototype",
            "namespace": "",
            "file": "js/actorPrototype.js",
            "line": 3,
            "description": "Prototype for all actors. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "actors": {
            "name": "actors",
            "shortname": "actors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "actors",
            "namespace": "",
            "file": "js/actors.js",
            "line": 3,
            "description": "Definitions for all the actor types in the game. Also includes a factory method (create)\nto create an actor of that type"
        },
        "baddyPrototype": {
            "name": "baddyPrototype",
            "shortname": "baddyPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "baddyPrototype",
            "namespace": "",
            "file": "js/baddyPrototype.js",
            "line": 3,
            "description": "Prototype for all baddies. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "campaign": {
            "name": "campaign",
            "shortname": "campaign",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "campaign",
            "namespace": "",
            "file": "js/campaign.js",
            "line": 3,
            "description": "Handles all state and behaviour for campaigns"
        },
        "game": {
            "name": "game",
            "shortname": "game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "game",
            "namespace": "",
            "file": "js/escape.js",
            "line": 11
        },
        "entities": {
            "name": "entities",
            "shortname": "entities",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entities",
            "namespace": "",
            "file": "js/entities.js",
            "line": 3,
            "description": "entities object contains code for tracking, processing and rendering entities"
        },
        "entityPrototype": {
            "name": "entityPrototype",
            "shortname": "entityPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entities",
            "namespace": "",
            "file": "js/entities.js",
            "line": 51,
            "description": "Prototype for all entities\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "graphics": {
            "name": "graphics",
            "shortname": "graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "file": "js/graphics.js",
            "line": 3,
            "description": "Graphics module\nContains all code that outputs to the canvas"
        },
        "input": {
            "name": "input",
            "shortname": "input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "input",
            "namespace": "",
            "file": "js/input.js",
            "line": 3,
            "description": "Input module\nContains all code relating to input"
        },
        "map": {
            "name": "map",
            "shortname": "map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "js/map.js",
            "line": 3,
            "description": "Map module. Objects and methods concerning the map"
        },
        "objectPrototype": {
            "name": "objectPrototype",
            "shortname": "objectPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "objectPrototype",
            "namespace": "",
            "file": "js/objectPrototype.js",
            "line": 1,
            "description": "Extend Object.prototype with helper methods to simplify inheritance\n\nEscape uses prototypal style inheritance rather than the constructor / pseudo-classical \napproach used by many javascript developers. The \"blueprints\" for each type of object\nare defined as objects in files named \"<type>Prototype.js\". A new object of that type can \nbe created using \"var newObj = <type>Prototype.create();\". To create a new prototype based\nupon a previous one use \"var newPrototype = <type>Prototype.extend();\"\n\nIt could be argued that extending Object.prototype in this way is an anti-pattern due to the\neffect it could have on code written by those who are unaware that it has been extended. However,\nthe code below takes account of the most common types of conflict and employs suitable preventative\nmeasures so this sort of problem should not occur."
        },
        "palette": {
            "name": "palette",
            "shortname": "palette",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "palette",
            "namespace": "",
            "file": "js/palette.js",
            "line": 3,
            "description": "Command palette for the game editor"
        },
        "playerPrototype": {
            "name": "playerPrototype",
            "shortname": "playerPrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "playerPrototype",
            "namespace": "",
            "file": "js/playerPrototype.js",
            "line": 3,
            "description": "Prototype for the player. Inherits from actor prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "polyfills": {
            "name": "polyfills",
            "shortname": "polyfills",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "polyfills",
            "namespace": "",
            "file": "js/polyfills.js",
            "line": 1,
            "description": "Polyfills module"
        },
        "projectilePrototype": {
            "name": "projectilePrototype",
            "shortname": "projectilePrototype",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "projectilePrototype",
            "namespace": "",
            "file": "js/projectilePrototype.js",
            "line": 3,
            "description": "Prototype for all projectiles. Inherits from entity prototype\n\nFor more information on how Escape uses inheritance see objectPrototype.js"
        },
        "screen": {
            "name": "screen",
            "shortname": "screen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "screen",
            "namespace": "",
            "file": "js/screen.js",
            "line": 3,
            "description": "Screen methods"
        },
        "tiles": {
            "name": "tiles",
            "shortname": "tiles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tiles",
            "namespace": "",
            "file": "js/tiles.js",
            "line": 3,
            "description": "Tiles module.\n\nHandles all functionality associated with map tiles\nIf you're looking for something and can't find it then try the map module"
        },
        "timer": {
            "name": "timer",
            "shortname": "timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "timer",
            "namespace": "",
            "file": "js/timer.js",
            "line": 3,
            "description": "Keeps track of the time between frames\n\nTODO: expand with functionality to set custom timers"
        },
        "vector": {
            "name": "vector",
            "shortname": "vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vector",
            "namespace": "",
            "file": "js/vector.js",
            "line": 3,
            "description": "A library of useful vector math functions\n\nAt first glance it may appear that a nicer syntax could be obtained by creating a vector type\nand attaching these methods to the prototype. However, the most common use case is an object\nof a different type that happens to have x and y properties. As using apply/call is fiddly\nin terms of syntax and multiple inheritance is memory inefficient in javascript (an object can \nonly be linked to a single prototype), I believe this approach to be best."
        },
        "weapons": {
            "name": "weapons",
            "shortname": "weapons",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "weapons",
            "namespace": "",
            "file": "js/weapons.js",
            "line": 3,
            "description": "Weapon definitions"
        }
    },
    "classitems": [
        {
            "file": "js/lib/AStar.js",
            "line": 3,
            "description": "A* (A-Star) algorithm for a path finder",
            "author": "Andrea Giammarchi",
            "license": "Mit Style License",
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1157,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1177,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1186,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1207,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1221,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1250,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1261,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1272,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1294,
            "description": "Detect xml",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1308,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1718,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/jquery-2.0.3.js",
            "line": 1747,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "util"
        },
        {
            "file": "js/lib/util.js",
            "line": 12,
            "description": "Takes a string and returns the value of the global variable with that name\n\nTo avoid global cluttering this method understands '.' syntax to follow the namespace/object chain\nThe only usage envisaged so far is the loading of variable names from JSON. Any other usage probably means \nwe're doing something wrong. Even the json example may mean that but I've not yet thought of a better way!",
            "itemtype": "method",
            "name": "valFromString",
            "return": {
                "description": "value",
                "type": "Any"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "js/lib/util.js",
            "line": 31,
            "description": "Returns a new array with an array element from one index to another",
            "params": [
                {
                    "name": "arr",
                    "description": "The array to modify",
                    "type": "Array"
                },
                {
                    "name": "currentIndex",
                    "description": "The index the element currently occupies",
                    "type": "Number"
                },
                {
                    "name": "newIndex",
                    "description": "The new index for the element to occupy",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "js/lib/util.js",
            "line": 55,
            "description": "Detect whether the current tab has lost focus (only works in some modern browsers)",
            "itemtype": "method",
            "name": "onVisibilityChange",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 23,
            "description": "Moves the actor in the direction indicated by vector v. If this would result in a collision with the map\nthen a more sensible vector is chosen and the actor moves that way instead",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "v",
                    "description": "the movement vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "true if the actor was unable to move. This is useful for the AI",
                "type": "Boolean"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 52,
            "description": "Moves actor towards the position indicated, taking into account the actor's speed\nMovement is attempted \"as the crow flies\" with no route selection",
            "itemtype": "method",
            "name": "moveTowards",
            "params": [
                {
                    "name": "position",
                    "description": "the location to move towards",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 67,
            "description": "Moves actor towards the position indicated, while performing sensible route selection\nRoute selection algorithm is A*",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "position",
                    "description": "the location to move to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 89,
            "description": "handles being hit by a projectile, including effect on health and action to take upon death",
            "itemtype": "method",
            "name": "hit",
            "params": [
                {
                    "name": "projectile",
                    "description": "The object that is doing the hitting. Should inherit from projectilePrototype",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this;"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 109,
            "description": "Fires the actor's weapon",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "target",
                    "description": "The location that is to be aimed at",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actorPrototype.js",
            "line": 163,
            "description": "Outputs an abbreviated version of the entity, suitable for saving to file",
            "itemtype": "method",
            "name": "abbr",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "actorPrototype",
            "module": "actorPrototype"
        },
        {
            "file": "js/actors.js",
            "line": 15,
            "description": "Creates an actor of the specified type",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "actor",
                    "description": "The object to extend with the actor definition. The type property \nof actor determines which definition to use.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An actor object",
                "type": "Object"
            },
            "class": "actors",
            "module": "actors"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 19,
            "description": "Defines the action to be taken by baddies each frame",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 41,
            "description": "Takes the current orders and calls the appropriate function in the appropriate context",
            "itemtype": "method",
            "name": "processOrders",
            "params": [
                {
                    "name": "orders",
                    "description": "string indicating the current orders"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 55,
            "description": "The baddy's default state. Currently does nothing",
            "itemtype": "method",
            "name": "orders.watch",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 65,
            "description": "Baddy attacks its target. If the baddy can no longer see the target it gives chase",
            "itemtype": "method",
            "name": "orders.attack",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 79,
            "description": "Baddy chases after target based upon its last known location\nIf the baddy gets to this location and still cannot see the player\nit goes into search mode",
            "itemtype": "method",
            "name": "orders.chase",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 101,
            "description": "The baddy searches for the target by heading off in the direction the target\nwas last seen moving",
            "itemtype": "method",
            "name": "orders.search",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 116,
            "description": "The baddy returns to its start location. It then enters watch mode",
            "itemtype": "method",
            "name": "orders.returnToStation",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 136,
            "description": "The baddy goes to its current waypoint, then reverts to its original orders",
            "itemtype": "method",
            "name": "orders.goto",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 156,
            "description": "The baddy patrols between a series of waypoints. When the baddy gets to the end, he returns directly to the first way point and starts again",
            "itemtype": "method",
            "name": "orders.patrol",
            "return": {
                "description": "baddyPrototype"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 177,
            "description": "The baddy's reaction to being hit",
            "itemtype": "method",
            "name": "hitHandler",
            "params": [
                {
                    "name": "projectile",
                    "description": "the object the baddy has been hit by"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 189,
            "description": "Checks if the baddy can see the player",
            "itemtype": "method",
            "name": "baddySeePlayer",
            "return": {
                "description": "boolean"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 201,
            "description": "sets the baddy's target and other target related information",
            "itemtype": "method",
            "name": "setTarget",
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/baddyPrototype.js",
            "line": 214,
            "description": "Renders the current patrol route",
            "itemtype": "method",
            "name": "renderPatrolRoute",
            "return": {
                "description": "this"
            },
            "class": "baddyPrototype",
            "module": "baddyPrototype"
        },
        {
            "file": "js/campaign.js",
            "line": 26,
            "description": "Loads a campaign",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "campaignName",
                    "description": "The name of the campaign. If campaignName is an object it treats that\nas the campaignObj rather than loading via ajax",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute once the campaign has been loaded successfully",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 64,
            "description": "Gets the name of the current map",
            "itemtype": "method",
            "name": "getCurrentmap",
            "return": {
                "description": "The name of the current map",
                "type": "String"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 74,
            "description": "Populates the relevant DOM elements with campaign information",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this;"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 90,
            "description": "Creates a new campaign. The only field populated is the name.\nThis method does not save the newly created campaign (use campaign.save())",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the new campaign",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 108,
            "description": "Saves the current information about the campaign\nNote: this requires that the server is in 'dev' mode",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to execute once the campaign has been saved",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 131,
            "description": "updates the value of a field in the campaign\ncan remove the prefix campaign from property names while preserving camel-casing",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "field",
                    "description": "The field to update (either the property name or a the id of a form element associated with that property)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 149,
            "description": "Adds a map to the campaign\nNote this does not check whether the map actually exists",
            "itemtype": "method",
            "name": "addMap",
            "params": [
                {
                    "name": "mapName",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "The index which this map should occupy within the \narray (defaults to adding the map to the end)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 171,
            "description": "Moves the map up one in the order (nearer the start)",
            "params": [
                {
                    "name": "mapName",
                    "description": "The name of the map",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this;"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 187,
            "description": "Moves the map down one in the order (nearer the end)",
            "params": [
                {
                    "name": "mapName",
                    "description": "The name of the map",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this;"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/campaign.js",
            "line": 203,
            "description": "Populates the relevant DOM ul with the campaigns",
            "itemtype": "method",
            "name": "list",
            "return": {
                "description": "this"
            },
            "class": "campaign",
            "module": "campaign"
        },
        {
            "file": "js/edit.js",
            "line": 15,
            "description": "Event handlers for map selection screen",
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 147,
            "description": "sends a request to the server instructing it to delete a file",
            "itemtype": "method",
            "name": "_deleteItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The delete button. Assuumes that the parent element has sufficent info in its class and id to identify the element to be deleted",
                    "type": "DOM element"
                },
                {
                    "name": "callback",
                    "description": "The function to be executed after the request has been completed",
                    "type": "Function"
                }
            ],
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 194,
            "description": "Updates the value of an item",
            "itemtype": "method",
            "name": "_editItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The DOM element being updated",
                    "type": "DOM Element"
                }
            ],
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 211,
            "description": "Carries out all initialisation actions",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapName",
                    "description": "or a mapObj",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 226,
            "description": "Starts any modules that need starting and then begins the game loop",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 242,
            "description": "The body of the game loop",
            "itemtype": "method",
            "name": "main",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 263,
            "description": "Resets game state when map data changes",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 276,
            "description": "A singleton DOM element. On first call creates the DOM element. On all calls populates the DOM element with the items\nin the game.info.items array.",
            "itemtype": "method",
            "name": "info",
            "return": {
                "description": "game",
                "type": "Object"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/edit.js",
            "line": 298,
            "description": "Adds an item to the game.info.items array. \nIf one argument, adds the variable name and value\nIf two, adds both separated by a colon",
            "itemtype": "method",
            "name": "info.add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the value to be displayed (basically a label)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to be displayed. If not a string, it will be coerced into one",
                    "type": "String"
                }
            ],
            "return": {
                "description": "game",
                "type": "Object"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/entities.js",
            "line": 17,
            "description": "Calls the process() method for each tracked entity and clears up entities that have been marked for removal",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "entities",
            "module": "entities"
        },
        {
            "file": "js/entities.js",
            "line": 35,
            "description": "Calls the render method for each tracked entity",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "entities",
            "module": "entities"
        },
        {
            "file": "js/entities.js",
            "line": 64,
            "description": "initialise entity",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "this"
            },
            "class": "entityPrototype",
            "module": "entities"
        },
        {
            "file": "js/entities.js",
            "line": 84,
            "description": "Placeholder function to be overridden by child objects\nInvoked once per game loop",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "entityPrototype",
            "module": "entities"
        },
        {
            "file": "js/escape.js",
            "line": 21,
            "description": "Initialise all required modules",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapName",
                    "description": "the filename of the map minus the file extension",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "Whether or not to start the game once the map has loaded (defaults to true)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 36,
            "description": "Start the game",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 49,
            "description": "Resume the game (either from scratch of from paused)\nStarts all required modules and starts the game loop",
            "itemtype": "method",
            "name": "resume",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 63,
            "description": "The body of the game loop",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 95,
            "description": "Displays debugging info and stats on the screen",
            "itemtype": "method",
            "name": "info",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 114,
            "description": "Pauses the game",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 129,
            "description": "Action to take when the game is over",
            "itemtype": "method",
            "name": "over",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 141,
            "description": "Action to take when map complete",
            "itemtype": "method",
            "name": "mapComplete",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 159,
            "description": "Resets game state in order to allow a new game to start",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "start",
                    "description": "Whether or not to start the game once the map has loaded (defaults to true)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/escape.js",
            "line": 173,
            "description": "End the game",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "this"
            },
            "class": "game",
            "module": "game"
        },
        {
            "file": "js/graphics.js",
            "line": 15,
            "description": "Initialise graphics settings and call specific graphics initialisation methods",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "width",
                    "description": "the width of the canvas in pixels. If set to \"fullscreen\" the \n width and height are set to the viewport width and height",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the canvas in pixels",
                    "type": "Number"
                },
                {
                    "name": "clipping",
                    "description": "if true, only the visible portion of the map is rendered",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 41,
            "description": "Create and initialise the canvas",
            "itemtype": "method",
            "name": "initCanvas",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the canvas (in case support for multiple canvases is needed later)",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "the width of the canvas in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the canvas in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 64,
            "description": "Adds text to graphics.textQueue to be rendered later this frame",
            "itemtype": "method",
            "name": "writeText",
            "params": [
                {
                    "name": "string",
                    "description": "the text to be written",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "the x coord of the string's position on the canvas",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y coord of the string's position on the canvas",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 78,
            "description": "renders the passed string immediately without taking measures to ensure that other\nrendered items this frame do not obscure the text",
            "itemtype": "method",
            "name": "writeTextNow",
            "params": [
                {
                    "name": "string",
                    "description": "the text to be rendered",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "the x coord of the string's position on the canvas",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y coord of the string's position on the canvas",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 103,
            "description": "Renders all text in the queue",
            "itemtype": "method",
            "name": "renderText",
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 117,
            "description": "object storing all vectors that need to be rendered this frame",
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 122,
            "description": "Renders each vector",
            "itemtype": "method",
            "name": "vectors.render",
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 136,
            "description": "Adds a vector command to be rendered this frame",
            "itemtype": "method",
            "name": "vectors.command",
            "params": [
                {
                    "name": "command",
                    "description": "contains code for rendering a specific vector using native HTML5 canvas methods",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 148,
            "description": "Draws a line this frame",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "start",
                    "description": "The start point",
                    "type": "Vector"
                },
                {
                    "name": "end",
                    "description": "The end point",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the line (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 165,
            "description": "Draws a line now",
            "itemtype": "method",
            "name": "lineNow",
            "params": [
                {
                    "name": "start",
                    "description": "The start point",
                    "type": "Vector"
                },
                {
                    "name": "end",
                    "description": "The end point",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the line (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 193,
            "description": "Draws a rectangle (outline only) this frame",
            "itemtype": "method",
            "name": ".rect",
            "params": [
                {
                    "name": "topLeft",
                    "description": "The coordinates of the top left corner of the rect",
                    "type": "Vector"
                },
                {
                    "name": "dimensions",
                    "description": "The width and height of the rect (defailts to 50 for both);",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the rect (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 210,
            "description": "Draws a rectangle (outline only) now",
            "itemtype": "method",
            "name": "rectNow",
            "params": [
                {
                    "name": "topLeft",
                    "description": "The coordinates of the top left corner of the rect",
                    "type": "Vector"
                },
                {
                    "name": "dimensions",
                    "description": "The width and height of the rect (defailts to 50 for both);",
                    "type": "Vector"
                },
                {
                    "name": "colour",
                    "description": "The colour of the rect (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 237,
            "description": "Draws a circle (filled) this frame",
            "itemtype": "method",
            "name": "circle",
            "params": [
                {
                    "name": "centre",
                    "description": "The centre of the circle",
                    "type": "Vector"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle (defaults to 50)",
                    "type": "Number"
                },
                {
                    "name": "colour",
                    "description": "The colour of the circle (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 254,
            "description": "Draws a circle (filled) now",
            "itemtype": "method",
            "name": "circleNow",
            "params": [
                {
                    "name": "centre",
                    "description": "The centre of the circle",
                    "type": "Vector"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle (defaults to 50)",
                    "type": "Number"
                },
                {
                    "name": "colour",
                    "description": "The colour of the circle (defaults to white)",
                    "type": "String"
                },
                {
                    "name": "mapCoords",
                    "description": "Whether to use map coords rather than canvas coords (defaults to canvas)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 279,
            "description": "Renders the canvas and all graphics",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/graphics.js",
            "line": 301,
            "description": "Changes the size of a canvas",
            "itemtype": "method",
            "name": "resizeCanvas",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the canvas to be resized",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "the width of the canvas in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the canvas in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "graphics",
            "module": "graphics"
        },
        {
            "file": "js/input.js",
            "line": 25,
            "description": "starts observing input",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "mode",
                    "description": "the input mode (i.e. what to check and what methods to run as a result)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 117,
            "description": "invoke event handlers",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 148,
            "description": "detach all input event handlers",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 159,
            "description": "Sets the style of the cursor to be used for this frame",
            "itemtype": "method",
            "name": "setMouseCursor",
            "params": [
                {
                    "name": "cursorStyle",
                    "description": "The css cursor style",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/input.js",
            "line": 170,
            "description": "Performs any rendering required by input",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "input",
            "module": "input"
        },
        {
            "file": "js/map.js",
            "line": 32,
            "description": "initialise the map based on a loaded map object",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "mapObj",
                    "description": "information about the map loaded from file (optional)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 67,
            "description": "load the map data",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "mapName",
                    "description": "the name of the map. This should also be the filename minus the extension \nif mapName is an object it will be treated as the mapObj and loaded instead of requesting the object\nfrom the server",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "the function to be called once the map has loaded",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 96,
            "description": "takes the map object and inserts it into the engine",
            "itemtype": "method",
            "name": "_loadMapObj",
            "params": [
                {
                    "name": "mapObj",
                    "description": "The map object to load",
                    "type": "Object"
                }
            ],
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 110,
            "description": "Creates a new blank map object",
            "itemtype": "method",
            "name": "new",
            "params": [
                {
                    "name": "mapName",
                    "description": "The filename of the new map minus the json extension",
                    "type": "String"
                },
                {
                    "name": "cols",
                    "description": "The number of columns in the map (defaults to 50)",
                    "type": "Number"
                },
                {
                    "name": "rows",
                    "description": "The number of rows in the map (defaults to 50)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "mapObj",
                "type": "Object"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 136,
            "description": "Updates map values",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "field",
                    "description": "The field to update (either the property name or a the id of a form element associated with that property)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 153,
            "description": "Saves the map on the server (this should only be allowed on the dev server)",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 183,
            "description": "renders the map",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 206,
            "description": "Checks that a position is within the bounds of the map",
            "itemtype": "method",
            "name": "checkWithinBounds",
            "params": [
                {
                    "name": "pos",
                    "description": "the position to test",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "true if the position is within the bounds of the map, false otherwise",
                "type": "Boolean"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 220,
            "description": "Gets the tile object for the tile index",
            "itemtype": "method",
            "name": "getTileObj",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 234,
            "description": "Checks that a particular tile is passable",
            "itemtype": "method",
            "name": "isPassable",
            "params": [
                {
                    "name": "tileIndex",
                    "description": "the index of the tile within the E.tiles.tiles array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the tile is passable, false otherwise",
                "type": "Boolean"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 245,
            "itemtype": "method",
            "name": "collisionAdjust",
            "params": [
                {
                    "name": "entity",
                    "description": "the entity that is moving",
                    "type": "Entity"
                },
                {
                    "name": "v",
                    "description": "the desired movement vector of the entity",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "an allowable movement vector",
                "type": "Vector"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 310,
            "description": "Scrolls the map so that it is looking at the passed position",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "position",
                    "description": "The position to look at",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 330,
            "description": "Returns the index of the tile corresponding to the passed postion",
            "itemtype": "method",
            "name": "getTileIndex",
            "params": [
                {
                    "name": "position",
                    "description": "the position to test",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "the index of the appropriate tile or undefined if there is no tile at that position",
                "type": "Number"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 346,
            "description": "Returns a vector indicating the position of the centre of the tile",
            "itemtype": "method",
            "name": "getTileCentre",
            "params": [
                {
                    "name": "tile",
                    "description": "The tile to consider. If an object is passed it will try to determine the tile based on the x and y properties of the object",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The postion of the centre of the tile",
                "type": "Vector"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 365,
            "description": "Converts a tile index into 2d coordinates within the tiles array",
            "itemtype": "method",
            "name": "getTileCoords",
            "params": [
                {
                    "name": "tile",
                    "description": "The tile index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The first element is the x coordinate, the second the y coordinate",
                "type": "Array"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 379,
            "description": "Converts 2d tile coords (not pixel coords) into a tile index",
            "itemtype": "method",
            "name": "getTileFromCoords",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord of the tile",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coord of the tile",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The tile index",
                "type": "Number"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 395,
            "description": "Checks if a line between two points can pass unimpeeded by the map\nNote that this does not check for collisions with entities",
            "itemtype": "method",
            "name": "lineTraversable",
            "params": [
                {
                    "name": "start",
                    "description": "The start location",
                    "type": "Vector"
                },
                {
                    "name": "end",
                    "description": "The end location",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "True if there are no impassable tiles between the start and end points, false otherwise",
                "type": "Boolean"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 424,
            "description": "Higlights the tile indicated",
            "itemtype": "method",
            "name": "highlightTile",
            "params": [
                {
                    "name": "tileIndex",
                    "description": "The tileIndex of the tile to highlight",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 446,
            "description": "highlights the tile under the mouse cursor",
            "itemtype": "method",
            "name": "highlightMouseTile",
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 457,
            "description": "Resizes the map",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "delta",
                    "description": "The four properties (top, right, bottom, left) indicate how many columns/rows to add. Negative numbers shrink the map",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/map.js",
            "line": 541,
            "description": "Returns a string indicating the side of the map closest to the mouse cursor",
            "itemtype": "method",
            "name": "sideClosestToCursor",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "map",
            "module": "map"
        },
        {
            "file": "js/objectPrototype.js",
            "line": 28,
            "description": "Return a new object inheriting from the previous one",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "propertiesObject",
                    "description": "an object that contains properties to add to the new object (overwriting previous ones with the same name)\nThe reason to use this over Object.create is that to pass in properties to the new object, Object.create requires property descriptors as its\nsecond argument rather than a straightforward object"
                }
            ],
            "return": {
                "description": "The new object",
                "type": "Object"
            },
            "class": "objectPrototype",
            "module": "objectPrototype"
        },
        {
            "file": "js/objectPrototype.js",
            "line": 47,
            "description": "Create a new object based on this prototype, modify according to the passed in parameters and run the init method if available",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "propertiesObject",
                    "description": "an object that contains properties to add to the new object"
                },
                {
                    "name": "initObject",
                    "description": "Any other parameters are passed to the init function",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "The new object",
                "type": "Object"
            },
            "class": "objectPrototype",
            "module": "objectPrototype"
        },
        {
            "file": "js/objectPrototype.js",
            "line": 65,
            "description": "Creates a copy of an object rather than a reference to that object\nNote that it is not recursive and does not copy inherited properties",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A new object identical to the original",
                "type": "Object"
            },
            "class": "objectPrototype",
            "module": "objectPrototype"
        },
        {
            "file": "js/palette.js",
            "line": 42,
            "description": "Player tool",
            "itemtype": "method",
            "name": "tools.player.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 59,
            "description": "Remove actor tool",
            "itemtype": "method",
            "name": "tools.removeActor.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 79,
            "description": "Baddy tool",
            "itemtype": "method",
            "name": "tools.baddy.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 96,
            "description": "Selects a map tile or entity",
            "itemtype": "method",
            "name": "tools.select.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 131,
            "description": "Highlights the selected tile",
            "itemtype": "method",
            "name": "tools.select.render",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 156,
            "description": "rotates the selected object",
            "itemtype": "method",
            "name": "tools.rotate.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 177,
            "description": "Draws a line from the selected entity to the current mouse cursor position",
            "itemtype": "method",
            "name": "tools.rotate.render",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 192,
            "description": "Adds an extra row / column to the side of the map closest to the cursor",
            "itemtype": "method",
            "name": "tools.expand.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 206,
            "description": "Sets the mouse cursor to an arrow indicating which side will be expanded",
            "itemtype": "method",
            "name": "tools.expand.render",
            "return": {
                "description": "palette;"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 225,
            "description": "Removes a row / column from the side of the map closest to the cursor",
            "itemtype": "method",
            "name": "tools.reduce.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 239,
            "description": "Sets the mouse cursor to an arrow indicating which side will be expanded",
            "itemtype": "method",
            "name": "tools.reduce.render",
            "return": {
                "description": "palette;"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 276,
            "description": "Initialises the patrol tool by clearing the currently selected entity's patrol route",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 291,
            "description": "Sets a patrol route for an actor",
            "itemtype": "method",
            "name": "tools.patrol.click",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 309,
            "description": "Displays the patrol route",
            "itemtype": "method",
            "name": "tools.patrol.render",
            "return": {
                "description": "palette"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 331,
            "description": "Displays the command palette",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 342,
            "description": "Hides the command palette",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 353,
            "description": "Changes the current tool",
            "itemtype": "method",
            "name": "changeTool",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 376,
            "description": "Initialises the command palette\n\nIncludes a generic event handler for using the currently selected tool",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 407,
            "description": "Sets the properties that are to be displayed in the properties panel",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "properties",
                    "description": "The properties to be set. Note that all properties must be primatives (not objects)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 424,
            "description": "Carries out rendering actions on behalf of palette tools",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/palette.js",
            "line": 440,
            "description": "refreshes the display of the palette",
            "itemtype": "method",
            "name": "refresh",
            "return": {
                "description": "this"
            },
            "class": "palette",
            "module": "palette"
        },
        {
            "file": "js/playerPrototype.js",
            "line": 24,
            "description": "Actions to be taken each frame for the player",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "playerPrototype",
            "module": "playerPrototype"
        },
        {
            "file": "js/polyfills.js",
            "line": 8,
            "description": "[requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame)\n\nNote that in this implementation the frame rate will not be exactly 60 due to the browser being single threaded.\nTODO: There is a fix for this - google it",
            "itemtype": "method",
            "name": "requestAnimationFrame",
            "class": "polyfills",
            "module": "polyfills"
        },
        {
            "file": "js/projectilePrototype.js",
            "line": 19,
            "description": "Carries out the processing required by a projectile each frame",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "projectilePrototype",
            "module": "projectilePrototype"
        },
        {
            "file": "js/projectilePrototype.js",
            "line": 30,
            "description": "Moves the projectile testing for collisions and calling the appropriate hit handlers",
            "itemtype": "method",
            "name": "move",
            "return": {
                "description": "this"
            },
            "class": "projectilePrototype",
            "module": "projectilePrototype"
        },
        {
            "file": "js/projectilePrototype.js",
            "line": 58,
            "description": "Renders the projectile\n\nPlaceholder graphics TODO: replace with bitmaps",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "this"
            },
            "class": "projectilePrototype",
            "module": "projectilePrototype"
        },
        {
            "file": "js/screen.js",
            "line": 24,
            "description": "Initialise screen",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "screenId",
                    "description": "The DOM ID of the initial screen to display",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 36,
            "description": "Change to another screen",
            "itemtype": "method",
            "name": "change",
            "params": [
                {
                    "name": "screenId",
                    "description": "The DOM ID of the screen to change to",
                    "type": "String"
                },
                {
                    "name": "updateHistory",
                    "description": "Whether or not to update the history (undefined defaults to true)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 63,
            "description": "Returns the DOM ID of the current screen",
            "itemtype": "method",
            "name": "getCurrent",
            "return": {
                "description": "The DOM ID of the current screen",
                "type": "String"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 73,
            "description": "Return to previous screen",
            "itemtype": "method",
            "name": "previous",
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 87,
            "description": "Actions to take when the current screen is updated",
            "itemtype": "method",
            "name": "update",
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 97,
            "description": "Actions to take when the screen is saved",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "this"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/screen.js",
            "line": 108,
            "description": "Gets the current save state for the screen",
            "itemtype": "method",
            "name": "isUnsaved",
            "return": {
                "description": "true means unsaved",
                "type": "Boolean"
            },
            "class": "screen",
            "module": "screen"
        },
        {
            "file": "js/tiles.js",
            "line": 18,
            "description": "Sets tile dimensions and passability",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "this"
            },
            "class": "tiles",
            "module": "tiles"
        },
        {
            "file": "js/tiles.js",
            "line": 43,
            "description": "Renders a tile\n\nPlaceholder code TODO: Update with bitmap graphics",
            "itemtype": "method",
            "name": "renderTile",
            "return": {
                "description": "this"
            },
            "class": "tiles",
            "module": "tiles"
        },
        {
            "file": "js/timer.js",
            "line": 17,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "this"
            },
            "class": "timer",
            "module": "timer"
        },
        {
            "file": "js/timer.js",
            "line": 32,
            "description": "updates the timer",
            "itemtype": "method",
            "name": "process",
            "return": {
                "description": "this"
            },
            "class": "timer",
            "module": "timer"
        },
        {
            "file": "js/vector.js",
            "line": 21,
            "description": "returns a vector with integer values for both x and y coordinates\n\nThis is particularly useful when rendering to the canvas where there is a big performance hit for non-integer values",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to be rounded",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 37,
            "description": "Adds two vectors together, returning the resulting vector",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v1",
                    "description": "A vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "A vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The resulting vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 52,
            "description": "Returns a new vector that is a copy of the inital vector",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 62,
            "description": "Subtracts one vector from another",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "v1",
                    "description": "The vector to subtract",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The vector to subtract from",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The resulting vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 77,
            "description": "Returns a vector of the same magnitude pointing in the opposite direction",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "v",
                    "description": "The initial vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 88,
            "description": "Calculates the magnitude (length) of a vector",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The magnitude",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 99,
            "description": "Calculates the distance between two vectors (imagine they represent points)",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance between the two vectors",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 111,
            "description": "Returns a new vector pointing the same direction but with length 1",
            "itemtype": "method",
            "name": "normalise",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to normalise",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The normalised vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 126,
            "description": "Returns a new vector pointing in the same direction but of the specified length",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "v",
                    "description": "The intial vector",
                    "type": "Vector"
                },
                {
                    "name": "length",
                    "description": "The new length",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The new vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 142,
            "description": "Calculates the dot product between two vectors\n\nThis can be thought of as a number indicating how closely the two vectors are aligned",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The dot product",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 156,
            "description": "The angle between two vectors (in radians)",
            "itemtype": "method",
            "name": "angle",
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                },
                {
                    "name": "dirMatters",
                    "description": "If true then the angle is +ve for clockwise angles, -ve for anticlockwise. If false the angle is always positive",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The angle (in radians)",
                "type": "Number"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "js/vector.js",
            "line": 186,
            "description": "Converts an angle (in radians) to a normalised vector (where the angle is from the positive x-axis)",
            "itemtype": "method",
            "name": "angleToVector",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle (directional and in radians) to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The resulting normalised vector",
                "type": "Vector"
            },
            "class": "vector",
            "module": "vector"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 37,
            "description": "Maximum levels of nesting that will be included when an object is pretty-printed",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 42,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 47,
            "description": "By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 62,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 126,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 134,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 144,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 154,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 164,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 175,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 187,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 197,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 211,
            "description": "Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 226,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 271,
            "description": "The name of the spy, if provided.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 275,
            "description": "Is this Object a spy?",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 279,
            "description": "The actual function this spy stubs.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 284,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 293,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 307,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 323,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 342,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 361,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 381,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 427,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 437,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 455,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 465,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods",
                "type": "jasmine.Spy"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 485,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 503,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 516,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "jasmine.Matchers"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 530,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 540,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 551,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 563,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 575,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 587,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 607,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 646,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 651,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 659,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 713,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 751,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 762,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 779,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 786,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 793,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1013,
            "is_constructor": 1,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1044,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1071,
            "is_constructor": 1,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1173,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1250,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1258,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1267,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1276,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toEqual() instead.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1285,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1295,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1304,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1311,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1318,
            "description": "Matcher that compares the actual to null.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1325,
            "description": "Matcher that compares the actual to NaN.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1336,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1344,
            "description": "Matcher that boolean nots the actual.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1352,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1374,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1377,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1401,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1426,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1429,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1446,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1455,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toContain() instead.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1473,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision,",
                    "description": "as number of decimal places",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1487,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1664,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1760,
            "is_constructor": 1,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1795,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1801,
            "description": "The total count of results",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1805,
            "description": "Number of passed results",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1809,
            "description": "Number of failed results",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1813,
            "description": "Was this suite/spec skipped?",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1817,
            "ignore": "",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1823,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1834,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1842,
            "description": "Getter for the results: message & results.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1849,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1869,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1875,
            "description": "Base class for pretty printing for expectation results.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 1882,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2123,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2200,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2239,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2262,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2275,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2287,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2443,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "",
            "module": "weapons"
        },
        {
            "file": "specs/lib/jasmine-1.3.1/jasmine.js",
            "line": 2540,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "weapons"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " js/lib/AStar.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/lib/jquery-2.0.3.js:1157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/lib/jquery-2.0.3.js:1221"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/lib/jquery-2.0.3.js:1308"
        },
        {
            "message": "unknown tag: ignore",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:62"
        },
        {
            "message": "unknown tag: ignore",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "unknown tag: ignore",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "unknown tag: ignore",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "unknown tag: ignore",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:187"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:427"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:762"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:779"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:786"
        },
        {
            "message": "unknown tag: ignore",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1817"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nA* (A-Star) algorithm for a path finder",
            "line": " js/lib/AStar.js:3"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " js/lib/jquery-2.0.3.js:1157"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " js/lib/jquery-2.0.3.js:1177"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " js/lib/jquery-2.0.3.js:1186"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " js/lib/jquery-2.0.3.js:1207"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " js/lib/jquery-2.0.3.js:1221"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " js/lib/jquery-2.0.3.js:1250"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " js/lib/jquery-2.0.3.js:1261"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " js/lib/jquery-2.0.3.js:1272"
        },
        {
            "message": "Missing item type\nDetect xml",
            "line": " js/lib/jquery-2.0.3.js:1294"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " js/lib/jquery-2.0.3.js:1308"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " js/lib/jquery-2.0.3.js:1718"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " js/lib/jquery-2.0.3.js:1747"
        },
        {
            "message": "Missing item type\nReturns a new array with an array element from one index to another",
            "line": " js/lib/util.js:31"
        },
        {
            "message": "Missing item type\nMoves the map up one in the order (nearer the start)",
            "line": " js/campaign.js:171"
        },
        {
            "message": "Missing item type\nMoves the map down one in the order (nearer the end)",
            "line": " js/campaign.js:187"
        },
        {
            "message": "Missing item type\nEvent handlers for map selection screen",
            "line": " js/edit.js:15"
        },
        {
            "message": "Missing item type\nobject storing all vectors that need to be rendered this frame",
            "line": " js/graphics.js:117"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:31"
        },
        {
            "message": "Missing item type\nMaximum levels of nesting that will be included when an object is pretty-printed",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:37"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:42"
        },
        {
            "message": "Missing item type\nBy default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:47"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:62"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:126"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:134"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:144"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:154"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:164"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:187"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:197"
        },
        {
            "message": "Missing item type\nReturns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:211"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:226"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:271"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:275"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:279"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:284"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:293"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:307"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:323"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:342"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:361"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:381"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:427"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:437"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:455"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:465"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:485"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:503"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:516"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:530"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:540"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:551"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:563"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:575"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:587"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:607"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:646"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:651"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:659"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:713"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:762"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:779"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:786"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:793"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1013"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1044"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1071"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1173"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1250"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1258"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1267"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1276"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1285"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1295"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1304"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1311"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1318"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to NaN.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1325"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1336"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1344"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1352"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1374"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1377"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1401"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1426"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1429"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1446"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1455"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1473"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1487"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1664"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1760"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1795"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1801"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1805"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1809"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1813"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1823"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1834"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1842"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1849"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1875"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:1882"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2123"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2200"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2239"
        },
        {
            "message": "Missing item type",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2262"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2275"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2287"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2443"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " specs/lib/jasmine-1.3.1/jasmine.js:2540"
        }
    ]
}